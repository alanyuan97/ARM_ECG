#!/usr/bin/python3

from http.server import SimpleHTTPRequestHandler, HTTPServer
import socketserver
import argparse
import sys
import json
import datetime
import mmap
import struct
import time

# LW_BRIDGE_BASE    = 0xFF200000 # absolute
# LEDR_RELATIVE_ADDR = 0x00000000  # relative to bridge
# LW_BRIDGE_SPAN   = 0x00005000 

class axi:  
    def __init__(self, addr, size):
        self.addr = addr
        self.size = size

        self.mem = open('/dev/mem', 'r+b')
        self.map = mmap.mmap(self.mem.fileno(), self.size, offset = self.addr)
        
    def __del__(self):
        self.map.close()
        self.mem.close()

    def read(self, addr):
        'Read 4 bytes from register at addr'
        self.map.seek(addr)
        return struct.unpack('<L', self.map.read(4))[0]

    def write(self, addr, data):
        'Write data as 4 bytes to register at addr'
        self.map.seek(addr)
        self.map.write(struct.pack('<L', data))

class HeartDiagnosis():
    LW_BRIDGE_BASE    = 0xFF200000 # absolute
    LEDR_RELATIVE_ADDR = 0x00000000  # relative to bridge
    LW_BRIDGE_SPAN   = 0x00005000 
    def __init__(self, addr = LW_BRIDGE_BASE, size = LW_BRIDGE_SPAN):
        self.axi = axi(addr, size)

    def get_erasmia(self, id):
        # check id is valid
        if id=="": raise Exception("No ID given")

        
        self.axi.write(self.LEDR_RELATIVE_ADDR,int(id))

        # make up data before interface with FPGA
        return {
            "name": "Arrhythmia",
            "probability": 0.42,
            "voltage": [1.000000000000000000e+00,6.069411039352416992e-01,3.841807842254638672e-01,2.542372941970825195e-01,2.235673964023590088e-01,2.768361568450927734e-01,2.534301877021789551e-01,1.848264783620834351e-01,1.533494740724563599e-01,1.218724772334098816e-01,1.251008808612823486e-01,1.291363984346389771e-01,1.372074186801910400e-01,1.372074186801910400e-01,1.323648095130920410e-01,1.267150938510894775e-01,1.581920832395553589e-01,1.525423675775527954e-01,1.323648095130920410e-01,1.686844229698181152e-01,1.565778851509094238e-01,1.832122653722763062e-01,1.912832856178283691e-01,2.041969299316406250e-01,2.300242185592651367e-01,2.445520609617233276e-01,2.857142984867095947e-01,3.075060546398162842e-01,3.212268054485321045e-01,3.276836276054382324e-01,3.518967032432556152e-01,3.736884593963623047e-01,3.970944285392761230e-01,3.631961345672607422e-01,3.405972421169281006e-01,3.075060546398162842e-01,2.582727968692779541e-01,1.977401077747344971e-01,1.993543207645416260e-01,1.735270321369171143e-01,1.476997584104537964e-01,1.355932205915451050e-01,1.339790225028991699e-01,1.057304292917251587e-01,1.218724772334098816e-01,1.355932205915451050e-01,1.065375283360481262e-01,1.485068649053573608e-01,1.355932205915451050e-01,1.347861140966415405e-01,1.509281694889068604e-01,1.646489053964614868e-01,9.443099051713943481e-02,1.065375283360481262e-01,1.210653781890869141e-01,1.412429362535476685e-01,1.226795837283134460e-01,1.355932205915451050e-01,1.315577030181884766e-01,1.509281694889068604e-01,1.170298606157302856e-01,1.331719160079956055e-01,1.041162237524986267e-01,1.372074186801910400e-01,1.194511726498603821e-01,1.146085560321807861e-01,9.685230255126953125e-02,9.120257943868637085e-02,1.291363984346389771e-01,1.000807136297225952e-01,8.635997027158737183e-02,1.138014495372772217e-01,4.116222634911537170e-02,9.362389147281646729e-02,8.151735365390777588e-02,7.425343245267868042e-02,8.071024715900421143e-02,7.990314811468124390e-02,7.828894257545471191e-02,5.326876416802406311e-02,7.506053149700164795e-02,7.586763799190521240e-02,8.071024715900421143e-02,1.041162237524986267e-01,8.393865823745727539e-02,7.667473703622817993e-02,1.194511726498603821e-01,1.129943504929542542e-01,7.990314811468124390e-02,1.178369671106338501e-01,9.362389147281646729e-02,1.178369671106338501e-01,8.635997027158737183e-02,1.380145251750946045e-01,9.927360713481903076e-02,8.313155919313430786e-02,6.941081583499908447e-02,7.828894257545471191e-02,5.326876416802406311e-02,9.604519605636596680e-02,1.404358297586441040e-01,1.113801449537277222e-01,1.622276008129119873e-01,1.234866827726364136e-01,1.380145251750946045e-01,6.456819921731948853e-02,8.797417581081390381e-02,6.133979186415672302e-02,3.793381899595260620e-02,3.954802080988883972e-02,7.183212041854858398e-02,4.600484296679496765e-02,4.519774019718170166e-02,0.000000000000000000e+00,1.614204980432987213e-02,6.537530571222305298e-02,1.565778851509094238e-01,2.251815944910049438e-01,4.608555138111114502e-01,9.507667422294616699e-01,6.069411039352416992e-01,3.349475264549255371e-01,2.251815944910049438e-01,2.122679650783538818e-01,2.477804720401763916e-01,2.163034677505493164e-01,1.170298606157302856e-01,8.071024715900421143e-02,1.033091172575950623e-01,6.779661029577255249e-02,1.307506114244461060e-01,8.151735365390777588e-02,7.990314811468124390e-02,6.941081583499908447e-02,1.129943504929542542e-01,1.129943504929542542e-01,1.347861140966415405e-01,1.364003270864486694e-01,1.565778851509094238e-01,1.339790225028991699e-01,1.315577030181884766e-01,1.630347073078155518e-01,1.977401077747344971e-01,2.203389853239059448e-01,2.009685188531875610e-01,2.526230812072753906e-01,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00,0.000000000000000000e+00],
            "time": datetime.datetime.now().strftime("%H:%M:%S")
        }



class MyHandler(SimpleHTTPRequestHandler):

    def do_GET(self):
        """Serve a GET request."""

        ####################################
        # ROUTER
        ####################################
        if self.path.split('/')[1] == 'api':
            # api stuff
            return self.do_api()
        else:
            # static stuff (default stuff)
            return SimpleHTTPRequestHandler.do_GET(self)


    def do_api(self):
        # current only disease is aresmia, no need furether routing
        try:
            erasmia_id = self.path.split('/')[-1]
            data = heartDiagnosis.get_erasmia(erasmia_id)
            print(erasmia_id)

        except:
            # unable to retrive data
            self.send_error(500, "Unable to retrive data from diagnosis")

        else:
            # retrived data without expection
            self.send_response(200)
            self.send_header("Content-type", "application/json")
            self.end_headers()

            self.wfile.write(json.dumps(data).encode('utf-8'))


if __name__ == '__main__':
    # parser argument
    parser = argparse.ArgumentParser()
    parser.add_argument('port', action='store',
                        default=8000, type=int,
                        nargs='?',
                        help='Specify alternate port [default: 8000]')
    parser.add_argument('--bind', '-b', default='', metavar='ADDRESS',
                        help='Specify alternate bind address '
                                '[default: all interfaces]')
    args = parser.parse_args()

    # init handlers
    heartDiagnosis=HeartDiagnosis()

    httpHandler = MyHandler
    httpHandler.protocol_version="HTTP/1.0"

    # init http demon
    httpd = HTTPServer((args.bind, args.port), httpHandler)

    # http demon status
    sa = httpd.socket.getsockname()
    print("Serving HTTP on", sa[0], "port", sa[1], "...")

    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nKeyboard interrupt received, exiting.")
        httpd.server_close()
        sys.exit(0)





